//------------------------------------------------------------------------------
// <auto-generated>
//    此代码是根据模板生成的。
//
//    手动更改此文件可能会导致应用程序中发生异常行为。
//    如果重新生成代码，则将覆盖对此文件的手动更改。
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Data.Objects;
using System.Data.Objects.DataClasses;
using System.Data.EntityClient;
using System.ComponentModel;
using System.Xml.Serialization;
using System.Runtime.Serialization;

[assembly: EdmSchemaAttribute()]
#region EDM 关系源元数据

[assembly: EdmRelationshipAttribute("ModelFirst", "STRATEGYTRANS_DETAIL", "STRATEGY", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(A0650_EF_SqlServer.Sample.STRATEGY), "TRANS_DETAIL", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(A0650_EF_SqlServer.Sample.TRANS_DETAIL), true)]
[assembly: EdmRelationshipAttribute("ModelFirst", "STOCKTRANS_DETAIL", "STOCK", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(A0650_EF_SqlServer.Sample.STOCK), "TRANS_DETAIL", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(A0650_EF_SqlServer.Sample.TRANS_DETAIL), true)]
[assembly: EdmRelationshipAttribute("ModelFirst", "TRANS_DETAILTRANS_RELATION_OPEN", "TRANS_DETAIL", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(A0650_EF_SqlServer.Sample.TRANS_DETAIL), "TRANS_RELATION", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(A0650_EF_SqlServer.Sample.TRANS_RELATION), true)]
[assembly: EdmRelationshipAttribute("ModelFirst", "TRANS_DETAILTRANS_RELATION_CLOSE", "TRANS_DETAIL", System.Data.Metadata.Edm.RelationshipMultiplicity.One, typeof(A0650_EF_SqlServer.Sample.TRANS_DETAIL), "TRANS_RELATION", System.Data.Metadata.Edm.RelationshipMultiplicity.Many, typeof(A0650_EF_SqlServer.Sample.TRANS_RELATION), true)]

#endregion

namespace A0650_EF_SqlServer.Sample
{
    #region 上下文
    
    /// <summary>
    /// 没有元数据文档可用。
    /// </summary>
    public partial class ModelFirstContainer : ObjectContext
    {
        #region 构造函数
    
        /// <summary>
        /// 请使用应用程序配置文件的“ModelFirstContainer”部分中的连接字符串初始化新 ModelFirstContainer 对象。
        /// </summary>
        public ModelFirstContainer() : base("name=ModelFirstContainer", "ModelFirstContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// 初始化新的 ModelFirstContainer 对象。
        /// </summary>
        public ModelFirstContainer(string connectionString) : base(connectionString, "ModelFirstContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        /// <summary>
        /// 初始化新的 ModelFirstContainer 对象。
        /// </summary>
        public ModelFirstContainer(EntityConnection connection) : base(connection, "ModelFirstContainer")
        {
            this.ContextOptions.LazyLoadingEnabled = true;
            OnContextCreated();
        }
    
        #endregion
    
        #region 分部方法
    
        partial void OnContextCreated();
    
        #endregion
    
        #region ObjectSet 属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<STRATEGY> STRATEGYS
        {
            get
            {
                if ((_STRATEGYS == null))
                {
                    _STRATEGYS = base.CreateObjectSet<STRATEGY>("STRATEGYS");
                }
                return _STRATEGYS;
            }
        }
        private ObjectSet<STRATEGY> _STRATEGYS;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<STOCK> STOCKS
        {
            get
            {
                if ((_STOCKS == null))
                {
                    _STOCKS = base.CreateObjectSet<STOCK>("STOCKS");
                }
                return _STOCKS;
            }
        }
        private ObjectSet<STOCK> _STOCKS;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<TRANS_DETAIL> TRANS_DETAILS
        {
            get
            {
                if ((_TRANS_DETAILS == null))
                {
                    _TRANS_DETAILS = base.CreateObjectSet<TRANS_DETAIL>("TRANS_DETAILS");
                }
                return _TRANS_DETAILS;
            }
        }
        private ObjectSet<TRANS_DETAIL> _TRANS_DETAILS;
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        public ObjectSet<TRANS_RELATION> TRANS_RELATIONS
        {
            get
            {
                if ((_TRANS_RELATIONS == null))
                {
                    _TRANS_RELATIONS = base.CreateObjectSet<TRANS_RELATION>("TRANS_RELATIONS");
                }
                return _TRANS_RELATIONS;
            }
        }
        private ObjectSet<TRANS_RELATION> _TRANS_RELATIONS;

        #endregion
        #region AddTo 方法
    
        /// <summary>
        /// 用于向 STRATEGYS EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToSTRATEGYS(STRATEGY sTRATEGY)
        {
            base.AddObject("STRATEGYS", sTRATEGY);
        }
    
        /// <summary>
        /// 用于向 STOCKS EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToSTOCKS(STOCK sTOCK)
        {
            base.AddObject("STOCKS", sTOCK);
        }
    
        /// <summary>
        /// 用于向 TRANS_DETAILS EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToTRANS_DETAILS(TRANS_DETAIL tRANS_DETAIL)
        {
            base.AddObject("TRANS_DETAILS", tRANS_DETAIL);
        }
    
        /// <summary>
        /// 用于向 TRANS_RELATIONS EntitySet 添加新对象的方法，已弃用。请考虑改用关联的 ObjectSet&lt;T&gt; 属性的 .Add 方法。
        /// </summary>
        public void AddToTRANS_RELATIONS(TRANS_RELATION tRANS_RELATION)
        {
            base.AddObject("TRANS_RELATIONS", tRANS_RELATION);
        }

        #endregion
    }
    

    #endregion
    
    #region 实体
    
    /// <summary>
    /// 股票
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ModelFirst", Name="STOCK")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class STOCK : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 STOCK 对象。
        /// </summary>
        /// <param name="sTOCK_CODE">STOCK_CODE 属性的初始值。</param>
        /// <param name="sTOCK_NAME">STOCK_NAME 属性的初始值。</param>
        public static STOCK CreateSTOCK(global::System.String sTOCK_CODE, global::System.String sTOCK_NAME)
        {
            STOCK sTOCK = new STOCK();
            sTOCK.STOCK_CODE = sTOCK_CODE;
            sTOCK.STOCK_NAME = sTOCK_NAME;
            return sTOCK;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 股票代码
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String STOCK_CODE
        {
            get
            {
                return _STOCK_CODE;
            }
            set
            {
                if (_STOCK_CODE != value)
                {
                    OnSTOCK_CODEChanging(value);
                    ReportPropertyChanging("STOCK_CODE");
                    _STOCK_CODE = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("STOCK_CODE");
                    OnSTOCK_CODEChanged();
                }
            }
        }
        private global::System.String _STOCK_CODE;
        partial void OnSTOCK_CODEChanging(global::System.String value);
        partial void OnSTOCK_CODEChanged();
    
        /// <summary>
        /// 股票名称
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String STOCK_NAME
        {
            get
            {
                return _STOCK_NAME;
            }
            set
            {
                OnSTOCK_NAMEChanging(value);
                ReportPropertyChanging("STOCK_NAME");
                _STOCK_NAME = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("STOCK_NAME");
                OnSTOCK_NAMEChanged();
            }
        }
        private global::System.String _STOCK_NAME;
        partial void OnSTOCK_NAMEChanging(global::System.String value);
        partial void OnSTOCK_NAMEChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ModelFirst", "STOCKTRANS_DETAIL", "TRANS_DETAIL")]
        public EntityCollection<TRANS_DETAIL> TRANS_DETAIL
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<TRANS_DETAIL>("ModelFirst.STOCKTRANS_DETAIL", "TRANS_DETAIL");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<TRANS_DETAIL>("ModelFirst.STOCKTRANS_DETAIL", "TRANS_DETAIL", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 策略表
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ModelFirst", Name="STRATEGY")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class STRATEGY : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 STRATEGY 对象。
        /// </summary>
        /// <param name="sTRATEGY_CODE">STRATEGY_CODE 属性的初始值。</param>
        /// <param name="sTRATEGY_NAME">STRATEGY_NAME 属性的初始值。</param>
        public static STRATEGY CreateSTRATEGY(global::System.String sTRATEGY_CODE, global::System.String sTRATEGY_NAME)
        {
            STRATEGY sTRATEGY = new STRATEGY();
            sTRATEGY.STRATEGY_CODE = sTRATEGY_CODE;
            sTRATEGY.STRATEGY_NAME = sTRATEGY_NAME;
            return sTRATEGY;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 策略代码
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String STRATEGY_CODE
        {
            get
            {
                return _STRATEGY_CODE;
            }
            set
            {
                if (_STRATEGY_CODE != value)
                {
                    OnSTRATEGY_CODEChanging(value);
                    ReportPropertyChanging("STRATEGY_CODE");
                    _STRATEGY_CODE = StructuralObject.SetValidValue(value, false);
                    ReportPropertyChanged("STRATEGY_CODE");
                    OnSTRATEGY_CODEChanged();
                }
            }
        }
        private global::System.String _STRATEGY_CODE;
        partial void OnSTRATEGY_CODEChanging(global::System.String value);
        partial void OnSTRATEGY_CODEChanged();
    
        /// <summary>
        /// 策略名称
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String STRATEGY_NAME
        {
            get
            {
                return _STRATEGY_NAME;
            }
            set
            {
                OnSTRATEGY_NAMEChanging(value);
                ReportPropertyChanging("STRATEGY_NAME");
                _STRATEGY_NAME = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("STRATEGY_NAME");
                OnSTRATEGY_NAMEChanged();
            }
        }
        private global::System.String _STRATEGY_NAME;
        partial void OnSTRATEGY_NAMEChanging(global::System.String value);
        partial void OnSTRATEGY_NAMEChanged();
    
        /// <summary>
        /// 策略描述
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public global::System.String STRATEGY_DESC
        {
            get
            {
                return _STRATEGY_DESC;
            }
            set
            {
                OnSTRATEGY_DESCChanging(value);
                ReportPropertyChanging("STRATEGY_DESC");
                _STRATEGY_DESC = StructuralObject.SetValidValue(value, true);
                ReportPropertyChanged("STRATEGY_DESC");
                OnSTRATEGY_DESCChanged();
            }
        }
        private global::System.String _STRATEGY_DESC;
        partial void OnSTRATEGY_DESCChanging(global::System.String value);
        partial void OnSTRATEGY_DESCChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ModelFirst", "STRATEGYTRANS_DETAIL", "TRANS_DETAIL")]
        public EntityCollection<TRANS_DETAIL> TRANS_DETAIL
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<TRANS_DETAIL>("ModelFirst.STRATEGYTRANS_DETAIL", "TRANS_DETAIL");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<TRANS_DETAIL>("ModelFirst.STRATEGYTRANS_DETAIL", "TRANS_DETAIL", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 成交明细
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ModelFirst", Name="TRANS_DETAIL")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TRANS_DETAIL : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 TRANS_DETAIL 对象。
        /// </summary>
        /// <param name="tRANS_ID">TRANS_ID 属性的初始值。</param>
        /// <param name="sTRATEGY_CODE">STRATEGY_CODE 属性的初始值。</param>
        /// <param name="sTOCK_CODE">STOCK_CODE 属性的初始值。</param>
        /// <param name="tRANS_DATETIME">TRANS_DATETIME 属性的初始值。</param>
        /// <param name="tRANS_DIRECTION">TRANS_DIRECTION 属性的初始值。</param>
        /// <param name="tRANS_TYPE">TRANS_TYPE 属性的初始值。</param>
        /// <param name="tRANS_VOLUME">TRANS_VOLUME 属性的初始值。</param>
        /// <param name="tRANS_PRICE">TRANS_PRICE 属性的初始值。</param>
        public static TRANS_DETAIL CreateTRANS_DETAIL(global::System.Int32 tRANS_ID, global::System.String sTRATEGY_CODE, global::System.String sTOCK_CODE, global::System.DateTime tRANS_DATETIME, global::System.String tRANS_DIRECTION, global::System.String tRANS_TYPE, global::System.Int32 tRANS_VOLUME, global::System.Decimal tRANS_PRICE)
        {
            TRANS_DETAIL tRANS_DETAIL = new TRANS_DETAIL();
            tRANS_DETAIL.TRANS_ID = tRANS_ID;
            tRANS_DETAIL.STRATEGY_CODE = sTRATEGY_CODE;
            tRANS_DETAIL.STOCK_CODE = sTOCK_CODE;
            tRANS_DETAIL.TRANS_DATETIME = tRANS_DATETIME;
            tRANS_DETAIL.TRANS_DIRECTION = tRANS_DIRECTION;
            tRANS_DETAIL.TRANS_TYPE = tRANS_TYPE;
            tRANS_DETAIL.TRANS_VOLUME = tRANS_VOLUME;
            tRANS_DETAIL.TRANS_PRICE = tRANS_PRICE;
            return tRANS_DETAIL;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 成交流水
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TRANS_ID
        {
            get
            {
                return _TRANS_ID;
            }
            set
            {
                if (_TRANS_ID != value)
                {
                    OnTRANS_IDChanging(value);
                    ReportPropertyChanging("TRANS_ID");
                    _TRANS_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("TRANS_ID");
                    OnTRANS_IDChanged();
                }
            }
        }
        private global::System.Int32 _TRANS_ID;
        partial void OnTRANS_IDChanging(global::System.Int32 value);
        partial void OnTRANS_IDChanged();
    
        /// <summary>
        /// 策略代码
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String STRATEGY_CODE
        {
            get
            {
                return _STRATEGY_CODE;
            }
            set
            {
                OnSTRATEGY_CODEChanging(value);
                ReportPropertyChanging("STRATEGY_CODE");
                _STRATEGY_CODE = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("STRATEGY_CODE");
                OnSTRATEGY_CODEChanged();
            }
        }
        private global::System.String _STRATEGY_CODE;
        partial void OnSTRATEGY_CODEChanging(global::System.String value);
        partial void OnSTRATEGY_CODEChanged();
    
        /// <summary>
        /// 股票代码
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String STOCK_CODE
        {
            get
            {
                return _STOCK_CODE;
            }
            set
            {
                OnSTOCK_CODEChanging(value);
                ReportPropertyChanging("STOCK_CODE");
                _STOCK_CODE = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("STOCK_CODE");
                OnSTOCK_CODEChanged();
            }
        }
        private global::System.String _STOCK_CODE;
        partial void OnSTOCK_CODEChanging(global::System.String value);
        partial void OnSTOCK_CODEChanged();
    
        /// <summary>
        /// 成交日时
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.DateTime TRANS_DATETIME
        {
            get
            {
                return _TRANS_DATETIME;
            }
            set
            {
                OnTRANS_DATETIMEChanging(value);
                ReportPropertyChanging("TRANS_DATETIME");
                _TRANS_DATETIME = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TRANS_DATETIME");
                OnTRANS_DATETIMEChanged();
            }
        }
        private global::System.DateTime _TRANS_DATETIME;
        partial void OnTRANS_DATETIMEChanging(global::System.DateTime value);
        partial void OnTRANS_DATETIMEChanged();
    
        /// <summary>
        /// 成交方向(B/S)
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TRANS_DIRECTION
        {
            get
            {
                return _TRANS_DIRECTION;
            }
            set
            {
                OnTRANS_DIRECTIONChanging(value);
                ReportPropertyChanging("TRANS_DIRECTION");
                _TRANS_DIRECTION = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TRANS_DIRECTION");
                OnTRANS_DIRECTIONChanged();
            }
        }
        private global::System.String _TRANS_DIRECTION;
        partial void OnTRANS_DIRECTIONChanging(global::System.String value);
        partial void OnTRANS_DIRECTIONChanged();
    
        /// <summary>
        /// 成交类型 (O/C)
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.String TRANS_TYPE
        {
            get
            {
                return _TRANS_TYPE;
            }
            set
            {
                OnTRANS_TYPEChanging(value);
                ReportPropertyChanging("TRANS_TYPE");
                _TRANS_TYPE = StructuralObject.SetValidValue(value, false);
                ReportPropertyChanged("TRANS_TYPE");
                OnTRANS_TYPEChanged();
            }
        }
        private global::System.String _TRANS_TYPE;
        partial void OnTRANS_TYPEChanging(global::System.String value);
        partial void OnTRANS_TYPEChanged();
    
        /// <summary>
        /// 成交数量
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 TRANS_VOLUME
        {
            get
            {
                return _TRANS_VOLUME;
            }
            set
            {
                OnTRANS_VOLUMEChanging(value);
                ReportPropertyChanging("TRANS_VOLUME");
                _TRANS_VOLUME = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TRANS_VOLUME");
                OnTRANS_VOLUMEChanged();
            }
        }
        private global::System.Int32 _TRANS_VOLUME;
        partial void OnTRANS_VOLUMEChanging(global::System.Int32 value);
        partial void OnTRANS_VOLUMEChanged();
    
        /// <summary>
        /// 成交价位
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Decimal TRANS_PRICE
        {
            get
            {
                return _TRANS_PRICE;
            }
            set
            {
                OnTRANS_PRICEChanging(value);
                ReportPropertyChanging("TRANS_PRICE");
                _TRANS_PRICE = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("TRANS_PRICE");
                OnTRANS_PRICEChanged();
            }
        }
        private global::System.Decimal _TRANS_PRICE;
        partial void OnTRANS_PRICEChanging(global::System.Decimal value);
        partial void OnTRANS_PRICEChanged();
    
        /// <summary>
        /// 获利点数
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> PROFIT_POINT
        {
            get
            {
                return _PROFIT_POINT;
            }
            set
            {
                OnPROFIT_POINTChanging(value);
                ReportPropertyChanging("PROFIT_POINT");
                _PROFIT_POINT = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PROFIT_POINT");
                OnPROFIT_POINTChanged();
            }
        }
        private Nullable<global::System.Decimal> _PROFIT_POINT;
        partial void OnPROFIT_POINTChanging(Nullable<global::System.Decimal> value);
        partial void OnPROFIT_POINTChanged();
    
        /// <summary>
        /// 获利金额
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=false, IsNullable=true)]
        [DataMemberAttribute()]
        public Nullable<global::System.Decimal> PROFIT_AMOUNT
        {
            get
            {
                return _PROFIT_AMOUNT;
            }
            set
            {
                OnPROFIT_AMOUNTChanging(value);
                ReportPropertyChanging("PROFIT_AMOUNT");
                _PROFIT_AMOUNT = StructuralObject.SetValidValue(value);
                ReportPropertyChanged("PROFIT_AMOUNT");
                OnPROFIT_AMOUNTChanged();
            }
        }
        private Nullable<global::System.Decimal> _PROFIT_AMOUNT;
        partial void OnPROFIT_AMOUNTChanging(Nullable<global::System.Decimal> value);
        partial void OnPROFIT_AMOUNTChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ModelFirst", "STRATEGYTRANS_DETAIL", "STRATEGY")]
        public STRATEGY STRATEGY
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<STRATEGY>("ModelFirst.STRATEGYTRANS_DETAIL", "STRATEGY").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<STRATEGY>("ModelFirst.STRATEGYTRANS_DETAIL", "STRATEGY").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<STRATEGY> STRATEGYReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<STRATEGY>("ModelFirst.STRATEGYTRANS_DETAIL", "STRATEGY");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<STRATEGY>("ModelFirst.STRATEGYTRANS_DETAIL", "STRATEGY", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ModelFirst", "STOCKTRANS_DETAIL", "STOCK")]
        public STOCK STOCK
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<STOCK>("ModelFirst.STOCKTRANS_DETAIL", "STOCK").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<STOCK>("ModelFirst.STOCKTRANS_DETAIL", "STOCK").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<STOCK> STOCKReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<STOCK>("ModelFirst.STOCKTRANS_DETAIL", "STOCK");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<STOCK>("ModelFirst.STOCKTRANS_DETAIL", "STOCK", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ModelFirst", "TRANS_DETAILTRANS_RELATION_OPEN", "TRANS_RELATION")]
        public EntityCollection<TRANS_RELATION> TRANS_RELATION_OPEN
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<TRANS_RELATION>("ModelFirst.TRANS_DETAILTRANS_RELATION_OPEN", "TRANS_RELATION");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<TRANS_RELATION>("ModelFirst.TRANS_DETAILTRANS_RELATION_OPEN", "TRANS_RELATION", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ModelFirst", "TRANS_DETAILTRANS_RELATION_CLOSE", "TRANS_RELATION")]
        public EntityCollection<TRANS_RELATION> TRANS_RELATION_CLOSE
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedCollection<TRANS_RELATION>("ModelFirst.TRANS_DETAILTRANS_RELATION_CLOSE", "TRANS_RELATION");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedCollection<TRANS_RELATION>("ModelFirst.TRANS_DETAILTRANS_RELATION_CLOSE", "TRANS_RELATION", value);
                }
            }
        }

        #endregion
    }
    
    /// <summary>
    /// 成交关系
    /// </summary>
    [EdmEntityTypeAttribute(NamespaceName="ModelFirst", Name="TRANS_RELATION")]
    [Serializable()]
    [DataContractAttribute(IsReference=true)]
    public partial class TRANS_RELATION : EntityObject
    {
        #region 工厂方法
    
        /// <summary>
        /// 创建新的 TRANS_RELATION 对象。
        /// </summary>
        /// <param name="oPEN_TRANS_ID">OPEN_TRANS_ID 属性的初始值。</param>
        /// <param name="cLOSE_TRANS_ID">CLOSE_TRANS_ID 属性的初始值。</param>
        public static TRANS_RELATION CreateTRANS_RELATION(global::System.Int32 oPEN_TRANS_ID, global::System.Int32 cLOSE_TRANS_ID)
        {
            TRANS_RELATION tRANS_RELATION = new TRANS_RELATION();
            tRANS_RELATION.OPEN_TRANS_ID = oPEN_TRANS_ID;
            tRANS_RELATION.CLOSE_TRANS_ID = cLOSE_TRANS_ID;
            return tRANS_RELATION;
        }

        #endregion
        #region 基元属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 OPEN_TRANS_ID
        {
            get
            {
                return _OPEN_TRANS_ID;
            }
            set
            {
                if (_OPEN_TRANS_ID != value)
                {
                    OnOPEN_TRANS_IDChanging(value);
                    ReportPropertyChanging("OPEN_TRANS_ID");
                    _OPEN_TRANS_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("OPEN_TRANS_ID");
                    OnOPEN_TRANS_IDChanged();
                }
            }
        }
        private global::System.Int32 _OPEN_TRANS_ID;
        partial void OnOPEN_TRANS_IDChanging(global::System.Int32 value);
        partial void OnOPEN_TRANS_IDChanged();
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [EdmScalarPropertyAttribute(EntityKeyProperty=true, IsNullable=false)]
        [DataMemberAttribute()]
        public global::System.Int32 CLOSE_TRANS_ID
        {
            get
            {
                return _CLOSE_TRANS_ID;
            }
            set
            {
                if (_CLOSE_TRANS_ID != value)
                {
                    OnCLOSE_TRANS_IDChanging(value);
                    ReportPropertyChanging("CLOSE_TRANS_ID");
                    _CLOSE_TRANS_ID = StructuralObject.SetValidValue(value);
                    ReportPropertyChanged("CLOSE_TRANS_ID");
                    OnCLOSE_TRANS_IDChanged();
                }
            }
        }
        private global::System.Int32 _CLOSE_TRANS_ID;
        partial void OnCLOSE_TRANS_IDChanging(global::System.Int32 value);
        partial void OnCLOSE_TRANS_IDChanged();

        #endregion
    
        #region 导航属性
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ModelFirst", "TRANS_DETAILTRANS_RELATION_OPEN", "TRANS_DETAIL")]
        public TRANS_DETAIL TRANS_DETAIL_OPEN
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TRANS_DETAIL>("ModelFirst.TRANS_DETAILTRANS_RELATION_OPEN", "TRANS_DETAIL").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TRANS_DETAIL>("ModelFirst.TRANS_DETAILTRANS_RELATION_OPEN", "TRANS_DETAIL").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TRANS_DETAIL> TRANS_DETAIL_OPENReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TRANS_DETAIL>("ModelFirst.TRANS_DETAILTRANS_RELATION_OPEN", "TRANS_DETAIL");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<TRANS_DETAIL>("ModelFirst.TRANS_DETAILTRANS_RELATION_OPEN", "TRANS_DETAIL", value);
                }
            }
        }
    
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [XmlIgnoreAttribute()]
        [SoapIgnoreAttribute()]
        [DataMemberAttribute()]
        [EdmRelationshipNavigationPropertyAttribute("ModelFirst", "TRANS_DETAILTRANS_RELATION_CLOSE", "TRANS_DETAIL")]
        public TRANS_DETAIL TRANS_DETAIL_CLOSE
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TRANS_DETAIL>("ModelFirst.TRANS_DETAILTRANS_RELATION_CLOSE", "TRANS_DETAIL").Value;
            }
            set
            {
                ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TRANS_DETAIL>("ModelFirst.TRANS_DETAILTRANS_RELATION_CLOSE", "TRANS_DETAIL").Value = value;
            }
        }
        /// <summary>
        /// 没有元数据文档可用。
        /// </summary>
        [BrowsableAttribute(false)]
        [DataMemberAttribute()]
        public EntityReference<TRANS_DETAIL> TRANS_DETAIL_CLOSEReference
        {
            get
            {
                return ((IEntityWithRelationships)this).RelationshipManager.GetRelatedReference<TRANS_DETAIL>("ModelFirst.TRANS_DETAILTRANS_RELATION_CLOSE", "TRANS_DETAIL");
            }
            set
            {
                if ((value != null))
                {
                    ((IEntityWithRelationships)this).RelationshipManager.InitializeRelatedReference<TRANS_DETAIL>("ModelFirst.TRANS_DETAILTRANS_RELATION_CLOSE", "TRANS_DETAIL", value);
                }
            }
        }

        #endregion
    }

    #endregion
    
}
