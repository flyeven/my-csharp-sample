#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:2.0.50727.3615
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace A0540_LINQ_SQL.Sample
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	public partial class Test : System.Data.Linq.DataContext
	{
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertTest_main(Test_main instance);
    partial void UpdateTest_main(Test_main instance);
    partial void DeleteTest_main(Test_main instance);
    partial void InsertTest_sub(Test_sub instance);
    partial void UpdateTest_sub(Test_sub instance);
    partial void DeleteTest_sub(Test_sub instance);
    #endregion
		
		public Test(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Test(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Test_main> Test_main
		{
			get
			{
				return this.GetTable<Test_main>();
			}
		}
		
		public System.Data.Linq.Table<Test_sub> Test_sub
		{
			get
			{
				return this.GetTable<Test_sub>();
			}
		}
	}
	
	public partial class Test_main : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Value;
		
		private EntitySet<Test_sub> _Test_sub;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public Test_main()
		{
			this._Test_sub = new EntitySet<Test_sub>(new Action<Test_sub>(this.attach_Test_sub), new Action<Test_sub>(this.detach_Test_sub));
			OnCreated();
		}
		
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		public EntitySet<Test_sub> Test_sub
		{
			get
			{
				return this._Test_sub;
			}
			set
			{
				this._Test_sub.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Test_sub(Test_sub entity)
		{
			this.SendPropertyChanging();
			entity.Test_main = this;
		}
		
		private void detach_Test_sub(Test_sub entity)
		{
			this.SendPropertyChanging();
			entity.Test_main = null;
		}
	}
	
	public partial class Test_sub : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Main_id;
		
		private string _Value;
		
		private EntityRef<Test_main> _Test_main;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMain_idChanging(System.Nullable<int> value);
    partial void OnMain_idChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public Test_sub()
		{
			this._Test_main = default(EntityRef<Test_main>);
			OnCreated();
		}
		
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		public System.Nullable<int> Main_id
		{
			get
			{
				return this._Main_id;
			}
			set
			{
				if ((this._Main_id != value))
				{
					this.OnMain_idChanging(value);
					this.SendPropertyChanging();
					this._Main_id = value;
					this.SendPropertyChanged("Main_id");
					this.OnMain_idChanged();
				}
			}
		}
		
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		public Test_main Test_main
		{
			get
			{
				return this._Test_main.Entity;
			}
			set
			{
				Test_main previousValue = this._Test_main.Entity;
				if (((previousValue != value) 
							|| (this._Test_main.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test_main.Entity = null;
						previousValue.Test_sub.Remove(this);
					}
					this._Test_main.Entity = value;
					if ((value != null))
					{
						value.Test_sub.Add(this);
						this._Main_id = value.Id;
					}
					else
					{
						this._Main_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("Test_main");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
