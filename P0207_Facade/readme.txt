Facade模式

Facade模式要求一个子系统的外部与其内部的通信必须通过一个统一的Facade对象进行。
Facade模式提供一个高层次的接口，使得子系统更易于使用。   


就如同医院的接待员一样，Facade模式的Facade类将客户端与子系统的内部复杂性分隔开，
使得客户端只需要与Facade对象打交道，而不需要与子系统内部的很多对象打交道。    




Facade的几个要点 

从客户程序的角度来看，
Facade模式不仅简化了整个组件系统的接口，
同时对于组件内部与外部客户程序来说，从某种程度上也达到了一种“解耦”的效果
――内部子系统的任何变化不会影响到Fa?ade接口的变化。   

 
Fadade设计模式更注重从架构的层次去看整个系统，
而不是单个类的层次。Facade很多时候更是一种架构设计模式。  

 
Facade设计模式并非一个集装箱，可以任意地放进任何多个对象。
Facade模式中组件的内部应该是“相互耦合关系比较大的一系列组件”，而不是一个简单的功能集合。   


 

注意区分Facade模式、Adapter模式、Bridge模式与Decorator模式。

Facade模式注重简化接口，
Adapter模式注重转换接口，
Bridge模式注重分离接口（抽象）与其实现，
Decorator模式注重稳定接口的前提下为对象扩展功能。 


 


生活中的例子
外观模式为子系统中的接口定义了一个统一的更高层次的界面，以便于使用。
当消费者按照目录采购时，则体现了一个外观模式。
消费者拨打一个号码与客服代表联系，
客服代表则扮演了这个"外观"，
他包含了与订货部、收银部和送货部的接口。 



[MSDN]
效果及实现要点
1．Facade模式对客户屏蔽了子系统组件，因而减少了客户处理的对象的数目并使得子系统使用起来更加方便。
2．Facade模式实现了子系统与客户之间的松耦合关系，而子系统内部的功能组件往往是紧耦合的。松耦合关系使得子系统的组件变化不会影响到它的客户。
3．如果应用需要，它并不限制它们使用子系统类。因此你可以在系统易用性与通用性之间选择。


适用性
1．为一个复杂子系统提供一个简单接口。
2．提高子系统的独立性。
3．在层次化结构中，可以使用Facade模式定义系统中每一层的入口。

总结
Facade模式注重的是简化接口，它更多的时候是从架构的层次去看整个系统，而并非单个类的层次。


