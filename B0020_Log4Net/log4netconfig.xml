<?xml version="1.0" encoding="utf-8" ?> 
<log4net>

  
  <!-- 控制台日志. -->
  <appender name="Console" type="log4net.Appender.ConsoleAppender">
    <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%5level [%thread] (%file:%line) - %message%newline" />
    </layout>
  </appender>


  <!-- 带颜色的控制台日志, -->
  <appender name="ColoredConsoleAppender" type="log4net.Appender.ColoredConsoleAppender">
    
    <!-- ERROR 级别的如何显示, -->
    <mapping>
      <level value="ERROR" />
      <foreColor value="White" />
      <backColor value="Red, HighIntensity" />
    </mapping>

    <!-- DEBUG 级别的如何显示, -->
    <mapping>
      <level value="DEBUG" />
      <backColor value="Green" />
    </mapping>
    
    <layout type="log4net.Layout.PatternLayout">
      <conversionPattern value="%date [%thread] %-5level %logger [%property{NDC}] - %message%newline" />
    </layout>
  </appender>  
  
  
  
  
  <!-- 文件日志. -->
  <appender name="FileAppender" type="log4net.Appender.FileAppender">
    <!-- 文件名. -->
    <file value="sample.log" />

    <!-- 追加方式 = true 的时候，如果日志文件存在，那么追加.
    追加方式 = false 的时候，如果日志文件存在，那么清除内容，重新开始.
    -->
    <appendToFile value="false" />
    
    
    <!-- 日志输出格式. -->
    <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%date [%thread] %-5level - %message%newline" />
    </layout>
    <!--
log4net.Layout.PatternLayout中的转换模式(ConversionPattern) 
%m(message):输出的日志消息，如ILog.Debug(…)输出的一条消息 
%n(new line):换行 
%d(datetime):输出当前语句运行的时刻 
%r(run time):输出程序从运行到执行到当前语句时消耗的毫秒数 
%t(thread id):当前语句所在的线程ID 
%p(priority): 日志的当前优先级别，即DEBUG、INFO、WARN…等 
%c(class):当前日志对象的名称，例如： 
       模式字符串为：%-10c -%m%n 
       代码为： 
ILog log=LogManager.GetLogger(“Exam.Log”); 
log.Debug(“Hello”); 
    则输出为下面的形式： 
Exam.Log       - Hello 
%L：输出语句所在的行号 
%F：输出语句所在的文件名 
%-数字：表示该项的最小长度，如果不够，则用空格填充 
例如，转换模式为%r [%t]%-5p %c - %m%n 的 PatternLayout 将生成类似于以下内容的输出： 
176 [main] INFO  org.foo.Bar - Located nearest gas station. 

-->

    <!-- 日志输出过滤器： 目前只有  WARN 与 ERROR 级别的 日志，才记录到文件当中. -->
    <filter type="log4net.Filter.LevelRangeFilter">
      <param name="LevelMin" value="WARN" />
      <param name="LevelMax" value="ERROR" />
    </filter>


  </appender>

  


  <!-- 
  文件日志.  每天产生一个文件. 
  当前的日志文件还是 sample_everyday.log
  以后的文件将变为 sample_everyday.log日期
  -->
  <appender name="RollingLogFileAppender_DateFormat" type="log4net.Appender.RollingFileAppender">
    <file value="sample_everyday.log" />
    <appendToFile value="true" />
    <rollingStyle value="Date" />
    <datePattern value="yyyyMMdd" />
    <layout type="log4net.Layout.PatternLayout">
      <conversionPattern value="%date [%thread](%file:%line) %-5level %logger [%property{NDC}] - %message%newline" />
    </layout>
  </appender>




  <!--
  
  建表语句.
  
  CREATE TABLE [dbo].[Log] (
    [Id] [int] IDENTITY (1, 1) NOT NULL,
    [Date] [datetime] NOT NULL,
    [Thread] [varchar] (255) NOT NULL,
    [Level] [varchar] (50) NOT NULL,
    [Logger] [varchar] (255) NOT NULL,
    [Message] [varchar] (4000) NOT NULL,
    [Exception] [varchar] (2000) NULL
)
       
  -->
  
  <!-- SQL Server -->
  <appender name="AdoNetAppender" type="log4net.Appender.AdoNetAppender">
    <bufferSize value="100" />
    <connectionType value="System.Data.SqlClient.SqlConnection, System.Data, Version=1.0.3300.0, Culture=neutral, PublicKeyToken=b77a5c561934e089" />
    <connectionString value="Data Source=localhost\SQLEXPRESS;Initial Catalog=Test;Integrated Security=True" />
    <commandText value="INSERT INTO Log ([Date],[Thread],[Level],[Logger],[Message],[Exception]) VALUES (@log_date, @thread, @log_level, @logger, @message, @exception)" />
    <parameter>
      <parameterName value="@log_date" />
      <dbType value="DateTime" />
      <layout type="log4net.Layout.RawTimeStampLayout" />
    </parameter>
    <parameter>
      <parameterName value="@thread" />
      <dbType value="String" />
      <size value="255" />
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%thread" />
      </layout>
    </parameter>
    <parameter>
      <parameterName value="@log_level" />
      <dbType value="String" />
      <size value="50" />
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%level" />
      </layout>
    </parameter>
    <parameter>
      <parameterName value="@logger" />
      <dbType value="String" />
      <size value="255" />
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%logger" />
      </layout>
    </parameter>
    <parameter>
      <parameterName value="@message" />
      <dbType value="String" />
      <size value="4000" />
      <layout type="log4net.Layout.PatternLayout">
        <conversionPattern value="%message" />
      </layout>
    </parameter>
    <parameter>
      <parameterName value="@exception" />
      <dbType value="String" />
      <size value="2000" />
      <layout type="log4net.Layout.ExceptionLayout" />
    </parameter>
  </appender>






  <!-- root 为顶级LOG 配置，所有的log默认使用顶级的配置信息. -->
  <root>
    <!-- 日志的级别. 分别为： OFF;FATAL;ERROR;WARN;INFO;DEBUG;ALL 这些级别.
      当调试的时候，使用 DEBUG，  
      一般情况下，使用 INFO、或者 WARN  -->
    <level value="DEBUG" />
    <!-- 日志的输出:  控制台 -->
    <appender-ref ref="Console" />
  </root>

  <!-- 这里专门为某些类，设置特殊的 LOG 配置. -->
  <logger name="LoggingExample2">
    <!-- 日志的级别 -->
    <level value="INFO" />

    <!-- 日志的输出:  控制台 与 文件 以及 SQL Server 数据库. -->
    <appender-ref ref="ColoredConsoleAppender" />
    <appender-ref ref="FileAppender" />
    <appender-ref ref="RollingLogFileAppender_DateFormat" />
    <appender-ref ref="AdoNetAppender" />
    
  </logger>  
  
</log4net>
