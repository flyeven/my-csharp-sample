本项目是“建造者”模式的 例子代码



在建造者模式结构图中包含如下几个角色：
 
1、Builder（抽象建造者）
它为创建一个产品Product对象的各个部件指定抽象接口，
在该接口中一般声明两类方法，一类方法是buildPartX()，它们用于创建复杂对象的各个部件；
另一类方法是getResult()，它们用于返回复杂对象。
Builder既可以是抽象类，也可以是接口。

本例子中是 
P0106_Builder.Builder.IComputerBuilder


 
2、ConcreteBuilder（具体建造者）
它实现了Builder接口，
实现各个部件的具体构造和装配方法，定义并明确它所创建的复杂对象，
也可以提供一个方法返回创建好的复杂产品对象。

本例子中是 
P0106_Builder.Builder.MiniComputerBuilder
P0106_Builder.Builder.PersonalComputerBuilder



3、Product（产品角色）
它是被构建的复杂对象，包含多个组成部件，具体建造者创建该产品的内部表示并定义它的装配过程。

本例子中是 
P0106_Builder.Product.AbstractComputer
P0106_Builder.Product.MiniComputer
P0106_Builder.Product.PersonalComputer



4、Director（指挥者）
指挥者又称为导演类，它负责安排复杂对象的建造次序，
指挥者与抽象建造者之间存在关联关系，
可以在其construct()建造方法中调用建造者对象的部件构造与装配方法，完成复杂对象的建造。
客户端一般只需要与指挥者进行交互，
在客户端确定具体建造者的类型，并实例化具体建造者对象（也可以通过配置文件和反射机制），
然后通过指挥者类的构造函数或者Setter方法将该对象传入指挥者类中。

本例子中是 
P0106_Builder.Director.ComputerDiector





什么情况下，应该使用建造模式

1、需要生成的产品对象有复杂的内部结构。
    每一个内部成分本身可以是对象，也可以仅仅是一个对象的组成部分。

2、需要生成的产品对象的属性互相依赖。建造模式可以强制实行一种分步骤进行建造的过程。
    因此，如果产品对象的一个属性必须在另外一个属性被赋值后才可以被赋值，使用建造模式便是一个好的设计思想。
	[例如：计算 商品的增值税， 必须先要设置商品的类型 与 价格， 增值税 =（农产品12%/非农产品17%）* 商品价格  ]

3、在对象的创建过程中，会使用到系统中的其他一些对象，这些对象在产品的创建过程中不容易得到。



使用建造模式的效果：
1、创建模式的使用，使产品内部的表象可以独立地变换。使客户端不必知道产品内部组成的细节。
2、每一个 Builder 都相对独立、而与其他的 Builder 无关。
3、模式所建造的最终产品更易于控制。


======================================================================


建造者模式与抽象工厂模式有点相似，
但是建造者模式返回一个完整的复杂产品，
而抽象工厂模式返回一系列相关的产品；

在抽象工厂模式中，客户端通过选择具体工厂来生成所需对象，
而在建造者模式中，客户端通过指定具体建造者类型并指导Director类如何去生成对象，侧重于一步步构造一个复杂对象，然后将结果返回。

如果将抽象工厂模式看成一个汽车配件生产厂，生成不同类型的汽车配件，
那么建造者模式就是一个汽车组装厂，通过对配件进行组装返回一辆完整的汽车。


=======================================================================

建造者模式总结
    建造者模式的核心在于如何一步步构建一个包含多个组成部件的完整对象，
	使用相同的构建过程构建不同的产品，
	在软件开发中，如果我们需要创建复杂对象并希望系统具备很好的灵活性和可扩展性可以考虑使用建造者模式。


1. 主要优点 

建造者模式的主要优点如下： 
(1) 在建造者模式中，
客户端不必知道产品内部组成的细节，将产品本身与产品的创建过程解耦，
使得相同的创建过程可以创建不同的产品对象。
 
(2) 每一个具体建造者都相对独立，而与其他的具体建造者无关，
因此可以很方便地替换具体建造者或增加新的具体建造者，
用户使用不同的具体建造者即可得到不同的产品对象。
由于指挥者类针对抽象建造者编程，增加新的具体建造者无须修改原有类库的代码，系统扩展方便，符合“开闭原则”
 
(3) 可以更加精细地控制产品的创建过程。
将复杂产品的创建步骤分解在不同的方法中，使得创建过程更加清晰，也更方便使用程序来控制创建过程。


2. 主要缺点
 
建造者模式的主要缺点如下：
(1) 建造者模式所创建的产品一般具有较多的共同点，其组成部分相似，
如果产品之间的差异性很大，例如很多组成部分都不相同，不适合使用建造者模式，因此其使用范围受到一定的限制。

(2) 如果产品的内部变化复杂，
可能会导致需要定义很多具体建造者类来实现这种变化，导致系统变得很庞大，增加系统的理解难度和运行成本。



3. 适用场景
 
在以下情况下可以考虑使用建造者模式：
 
(1) 需要生成的产品对象有复杂的内部结构，这些产品对象通常包含多个成员属性。
(2) 需要生成的产品对象的属性相互依赖，需要指定其生成顺序。
(3) 对象的创建过程独立于创建该对象的类。在建造者模式中通过引入了指挥者类，将创建过程封装在指挥者类中，而不在建造者类和客户类中。
(4) 隔离复杂对象的创建和使用，并使得相同的创建过程可以创建不同的产品。
