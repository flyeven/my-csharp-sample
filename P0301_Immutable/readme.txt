不变模式可增强对象的强壮性(robustness)。
不变模式允许多个对象共享某一对象，降低对该对象进行并发访问的同步化开销。
如果需要修改一个不变对象的状态，就需要建立一个新的同类型对象，并在创建时将这个新的状态存储在新对象里。


不变模式之设计一个类。一个类的内部状态创建后，在整个生命期内都不会发生变化时，这个类被称为不变类。
这种使用不变类的做法叫作不变模式。


不变模式有两种形式：一种是弱不变模式，另一种是强不变模式。 



弱不变模式：
一个类的实例的状态是不可变化的，但是这个类的引用的实例具有可能会变化的状态。这样的类符合弱不变模式的定义。
要实现弱不变模式，一个类必须满足如下条件： 

第一，对象没有任何方法会修改对象的状态，当对象的构造函数对对象的状态初始化之后，对象的状态便不再改变。 

第二，所有的属性都应当是私有的，以防客户端对象直接修改任何的内部状态。 

第三，这个对象所引用的对象如果是可变对象的话，必须设法限制外界对这个对象的访问，以防止对这些对象的修改。如果可能应该尽量在不变对象的内部来初始化。 


弱不变模式的缺点是： 
一个弱不变对象引用的实例变量可以是可变对象，可能会通过外界修改父对象的状态，这是一个显著的缺点。可以在初始化可变对象时，先进行clone。 




强不变模式： 

一个类的实例的状态不会改变，同时它的子类的实例也具有不可变化的状态。这样的类符合强不变模式。要实现强不变模式，一个类必须首先满足弱不变模式所要求的所有条件，并且还要满足下面条件之一： 

第一，所考虑的类所有的方法都应当是 sealed，这样这个类的子类不能够置换掉此类的方法。 

第二，这个类本身就是 sealed 的，那么这个类就不可能会有子类，从而也就不可能有被子类修改的问题。 




优缺点： 
不变模式可增强对象的健壮性。不变模式允许多个对象共享某一对象，降低了对该对象进行并发访问时的同步化开销。
唯一缺点是一旦需要修改一个不变对象的状态，就只好创建一个新的同类对象，
在需要频繁修改不变对象的环境里，会有大量的不变对象作为中间结果被创建出来，
这是一种资源的浪费。 


总结： 
不变模式的核心就是对象不变，从而引伸出对象复用共享的思想。
如无状态的单例模式，享元(Flyweight)模式及原型模式(Prototype)都可以认为是不变模式的应用。
其它如线程池，缓存等的实现也一定程度上是使用不变模式。
