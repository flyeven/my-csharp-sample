<?xml version="1.0" encoding="utf-8" ?>
<configuration>
  
    <system.serviceModel>
        <!-- 
          此节包含标准绑定和自定义绑定的集合。
          每一项均由其唯一的 name 进行标识。
          服务通过用 name 与绑定进行链接来使用绑定。
        -->
        <bindings>
          
            
            <!-- 
            basicHttpBinding 表示一个绑定，Windows Communication Foundation (WCF) 服务可以使用此绑定配置和公开这样的终结点：
            这些终结点能够与基于 ASMX 的 Web 服务和客户端以及符合 WS-I Basic Profile 1.1 标准的其他服务进行通信。
            
            
            
            name ： 一个包含绑定的配置名称的字符串。因为此值用作绑定的标识，所以它应该是唯一的。
                          每个绑定都具有 name 和 namespace 属性，
                          它们共同在服务的元数据中唯一标识每个绑定。
                          此外，在同一类型的绑定中，此名称是唯一的。
 
            namespace ： 指定绑定的 XML 命名空间。默认值为“http://tempuri.org/Bindings”。
                          每个绑定都具有 name 和 namespace 属性，它们共同在服务的元数据中唯一标识每个绑定。
 

            
            
            
            allowCookies : 一个布尔值，指示客户端是否接受 Cookie 并在今后的请求中传播这些 Cookie。默认值为 false。
                          在与使用 Cookie 的 ASMX Web 服务进行交互时，可以使用此属性。
                          通过这种方式，可以确保从服务器返回的 Cookie 自动复制到客户端今后对该服务的所有请求。


            
           
            
            envelopeVersion : 指定用于通过此绑定处理的消息的 SOAP 版本。只有 Soap11 是有效值。
            
            hostnameComparisonMode : 指定用于分析 URI 的 HTTP 主机名比较模式。
                          此属性的类型为 HostnameComparisonMode，指示在对 URI 进行匹配时，是否使用主机名来访问服务。
                          默认值为 StrongWildcard，表示在匹配过程中忽略主机名。



            maxBufferPoolSize : 一个整数值，指定为从通道接收消息的消息缓冲区管理器分配并供其使用的最大内存量。
                          默认值为 524288 (0x80000) 字节。
                          通过使用缓冲池，缓冲区管理器可将使用缓冲区的开销降到最低。
                          当消息离开通道时，服务需要使用缓冲区来处理这些消息。
                          如果缓冲池中的内存不够用来处理消息负载，则缓冲区管理器必须从 CLR 堆分配更多内存，而这会增加垃圾回收的系统开销。
                          从 CLR 垃圾堆进行大量分配表明缓冲池太小，可以通过提高此属性指定的限制来实现更大的内存分配，从而提高性能。

            maxBufferSize : 一个整数值，指定为采用此绑定配置的终结点处理消息时存储消息的缓冲区的最大大小（字节）。默认值为 65,536 字节。
            
            maxReceivedMessageSize : 一个正整数，定义在采用此绑定配置的通道上可以接收的消息的最大消息大小（字节），包括消息头。
                          如果消息对于接收方而言太大，则发送方将收到 SOAP 错误。
                          接收方将删除该消息，并在跟踪日志中创建事件项。默认值为 65,536 字节。
                          






            transferMode ： 一个有效的 TransferMode 值，指定为请求或响应对消息进行缓冲处理还是流式处理。
            
            
            
            ================================================================================
 

            useDefaultWebProxy ： 一个布尔值，指定是否应在可用时使用系统的自动配置 HTTP 代理。默认值为 true。
 
            proxyAddress ： 一个包含 HTTP 代理地址的 URI。如果 useSystemWebProxy 设置为 true，则此设置必须为 null。默认值为 null。
            
            bypassProxyOnLocal : 一个布尔值，指示是否对本地地址不使用代理服务器。默认值为 false。
                          当此属性为 false 时，所有 Internet 请求都通过代理服务器发出。



            ================================================================================



            messageEncoding ： 定义用于对 SOAP 消息进行编码的编码器。包括以下有效值：
                          Text：使用文本消息编码器。
                          Mtom：使用消息传输组织机制 1.0 (MTOM) 编码器。
                          默认值为 Text。此特性的类型为 WSMessageEncoding。

            textEncoding ： 设置要用来在绑定上发出消息的字符集编码。包括以下有效值：
                          BigEndianUnicode：Unicode BigEndian 编码。
                          Unicode：16 位编码。
                          UTF8：8 位编码
                          默认值为 UTF8。此属性的类型为 Encoding。


            ================================================================================

 
            openTimeout ： 一个 TimeSpan 值，指定为完成打开操作提供的时间间隔。此值应大于或等于 Zero。默认值为 00:01:00。         
            closeTimeout : 一个 TimeSpan 值，指定为完成关闭操作提供的时间间隔。此值应大于或等于 Zero。默认值为 00:01:00。            
            sendTimeout ： 一个 TimeSpan 值，指定为完成发送操作提供的时间间隔。此值应大于或等于 Zero。默认值为 00:01:00。
            receiveTimeout ： 一个 TimeSpan 值，指定为完成接收操作提供的时间间隔。此值应大于或等于 Zero。默认值为 00:10:00。 
            
            -->
            <basicHttpBinding>
                <binding 
                    name="BasicHttpBinding_IMyWcfService" 
                    closeTimeout="00:01:00"
                    openTimeout="00:01:00" 
                    receiveTimeout="00:10:00" 
                    sendTimeout="00:01:00"
                    allowCookies="false" 
                    bypassProxyOnLocal="false" 
                    hostNameComparisonMode="StrongWildcard"
                    maxBufferSize="65536" 
                    maxBufferPoolSize="524288" 
                    maxReceivedMessageSize="65536"
                    messageEncoding="Text" 
                    textEncoding="utf-8" 
                    transferMode="Buffered"
                    useDefaultWebProxy="true">

                  
                    <!--
                    readerQuotas 定义可由采用此绑定配置的终结点进行处理的 SOAP 消息的复杂性约束。
                                此元素的类型为 XmlDictionaryReaderQuotasElement。
                    
                    maxArrayLength : WCF 客户端可以接收到的最大数组长度 。 默认值 16384
                    maxBytesPerRead : 允许每次读取返回的最大字节数。 默认值 4096
                    maxDepth ： 每次读操作的最大嵌套节点深度。 默认值 32
                    maxNameTableCharCount ： 表名称中允许的最大字符数。 默认值 16384
                    maxStringContentLength ： XML 元素内容中最多可包含的字符数。 默认值 8192
                    -->

                    <readerQuotas 
                        maxDepth="32" 
                        maxStringContentLength="8192" 
                        maxArrayLength="16384"
                        maxBytesPerRead="4096" 
                        maxNameTableCharCount="16384" />
                  
                    <!--
                    security   定义 <basicHttpBinding>的安全功能。
                    
                    mode : 可选项。指定所使用的安全类型。默认值为 None。此属性的类型为 BasicHttpSecurityMode。
                            
                            None = SOAP 消息在传输过程中并不安全。这是默认行为。
                            
                            Transport = 使用 HTTPS 提供安全性。
                                      此服务必须使用 SSL 证书进行配置。
                                      SOAP 消息是用 HTTPS 作为一个整体进行保护的。
                                      客户端使用服务的 SSL 证书对服务进行身份验证。
                                      通过 ClientCredentialType 可对客户端身份验证进行控制。
                                      
                            Message = 使用 SOAP 消息安全提供安全性。
                                      对于 BasicHttpBinding，系统要求向客户端单独提供服务器证书。
                                      此绑定的有效客户端凭据类型为 UserName 和 Certificate。
                            
                            TransportWithMessageCredential = 完整性、保密性和服务器身份验证均由 HTTPS 提供。
                                      此服务必须使用证书进行配置。
                                      客户端身份验证采用 SOAP 消息安全方式提供。
                                      如果要使用用户名或证书凭据对用户进行身份验证，
                                      并且存在用于保护消息传输的现有 HTTPS 部署，则适用此模式。
                                      
                            TransportCredentialOnly = 此模式并不提供消息的完整性和保密性，而是仅提供基于 HTTP 的客户端身份验证。
                                      使用此模式时一定要小心。
                                      在通过其他方式（如 IPSec）提供传输安全并且 基础结构只提供客户端身份验证的环境中，应该使用此模式。
                    -->
                    <security mode="None">
                      
                        <!--
                        transport  为 HTTP 传输定义控制身份验证参数的属性。此元素与 HttpTransportSecurity 相对应。
                        
                        clientCredentialType : 指定要在使用 HTTP 身份验证执行客户端身份验证时使用的凭据类型。
                                    默认值为 None。此属性的类型为 HttpClientCredentialType。
                                    
                                    None = 指定匿名身份验证。
                                    Basic = 指定基本身份验证。
                                    Digest = 指定摘要式身份验证。
                                    Ntlm = 指定使用 NTLM 进行客户端身份验证。
                                    Windows = 指定使用 Windows 进行客户端身份验证。
                                    Certificate = 指定使用证书进行客户端身份验证。
                                    

                        proxyCredentialType : 指定通过 HTTP 使用代理在域中执行客户端身份验证时要使用的凭据类型。
                                    只有当父 security 元素的 mode 属性为 Transport 或 TransportCredentialsOnly 时，此属性才适用。
                                    此属性的类型为 HttpProxyCredentialType。
                                    
                                    None = 指定匿名身份验证。
                                    Basic = 指定基本身份验证。
                                    Digest = 指定摘要式身份验证。
                                    Ntlm = 指定使用 NTLM 进行客户端身份验证。
                                    Windows = 指定使用 Windows 进行客户端身份验证。

                        
                        realm : 一个字符串，指定摘要式或基本身份验证的 HTTP 身份验证方案所使用的领域。
                                    默认值为一个空字符串。
 
                                    

                        policyEnforcement : 此枚举指定应何时强制实施 ExtendedProtectionPolicy。
                                  1.Never – 绝不强制实施此策略（禁用扩展保护）。
                                  2.WhenSupported – 仅在客户端支持扩展保护时才强制实施此策略。
                                  3.Always – 总是强制实施此策略。不支持扩展保护的客户端将无法进行身份验证。            

                        protectionScenario : 此枚举指定此策略强制实施的保护方案。
 
                        -->
                        <transport 
                            clientCredentialType="None" 
                            proxyCredentialType="None"
                            realm="" />
                      
                      
                      
                        <!-- 
                        message 定义基本 HTTP 服务的消息安全设置。此元素与 BasicHttpMessageSecurity 相对应。
                        
                        
                        algorithmSuite : 设置消息加密和密钥包装算法。
                                此属性类型为 SecurityAlgorithmSuite，用于指定算法和密钥大小。
                                这些算法映射到安全策略语言 (WS-SecurityPolicy) 规范中指定的算法。
                                默认值为 Basic256。
 
                        clientCredentialType : 指定要在使用基于消息的安全性执行客户端身份验证时使用的凭据类型。
                                默认值为 UserName。
 
 
                        -->
                        <message 
                            clientCredentialType="UserName" 
                            algorithmSuite="Default" />
                      
                    </security>
                  
                  
                </binding>
            </basicHttpBinding>
        </bindings>
      
      
      
      
      
        <!--
          此节包含客户端用来连接到服务的终结点的列表。
        -->
        <client>
          
            <!-- 
            endpoint 指定通道终结点的协定、绑定和地址属性，客户端使用通道终结点与服务器上的服务终结点连接。
            
            address : 必需的字符串属性。 
                      指定终结点的地址。默认值为一个空字符串。该地址必须为绝对 URI。
                      
            behaviorConfiguration : 一个字符串，其中包含要用于实例化终结点的行为的行为名。
                      定义服务时，该行为名必须在作用域内。默认值为一个空字符串。
            
            binding : 必需的字符串属性。 
                      一个字符串，指示要使用的绑定的类型。
                      该类型必须具有一个已注册的配置节，才能加以引用。
                      该类型是按节名而不是绑定的类型名注册的。

            bindingConfiguration : 可选项。
                      一个字符串，其中包含实例化终结点时要使用的绑定配置的名称。
                      定义终结点时，绑定配置必须在作用域内。默认值为一个空字符串。
                      此属性与 binding 结合使用，以引用配置文件中的特定绑定配置。
                      如果尝试使用自定义绑定，请设置此属性。否则，可能引发异常。

            contract : 必需的字符串属性。
                      一个字符串，指示此终结点公开了哪个协定。程序集必须实现该协定类型。

            endpointConfiguration : 一个字符串，指定由 kind 特性设置的标准终结点的名称，
                      此名称引用此标准终结点的其他配置信息。
                      必须在 <standardEndpoints> 节中定义相同的名称。
            
            
            kind : 一个字符串，指定应用的标准终结点的类型。
                      此类型必须在 <extensions> 节或 machine.config 中进行注册。
                      如果未指定任何值，则创建通用通道终结点。
 
 
            name : 可选的字符串特性。此特性唯一标识给定协定的终结点。
                      可以为一个给定协定类型定义多个客户端。
                      每个定义都必须用唯一的配置名称加以区分。
                      如果省略此属性，则将对应的终结点用作与指定协定类型相关联的默认终结点。
                      默认值为一个空字符串。
                      绑定的 name 属性用于通过 WSDL 进行的定义导出。
            -->
          
            <endpoint 
                address="http://localhost:7201/MyWcfService.svc" 
                binding="basicHttpBinding"
                bindingConfiguration="BasicHttpBinding_IMyWcfService" 
                contract="MyWcfService.IMyWcfService"
                name="BasicHttpBinding_IMyWcfService" />
        </client>

    </system.serviceModel>
</configuration>