调停者模式 / 中介者模式（Mediator Pattern）

定义一个中介对象来封装系列对象之间的交互。
中介者使各个对象不需要显示地相互引用，从而使其耦合性松散，而且可以独立地改变他们之间的交互。 
Define an object that encapsulates how a set of objects interact. 
Mediator promotes loose coupling by keeping objects from referring to each other explicitly, 
and it lets you vary their interaction independently。


中介者减少了各个同事对象的耦合，使得可以独立地改变和复用各个同事对象和中介者类；
由于把对想如何协作进行了抽象，将中介作为一个独立的概念并将其封装在一个对象中，
这样关注的对象就从对象各自本身的行为转移到他们之间的交互上来，也就是站在一个更宏伟的角度去考虑系统。


调停者模式(Mediator) 属于对象的行为模式。
1. 定义
  调停者模式包装了一系列对象相互作用的方式，使得这些对象不必相互明显作用。
  从而使他们可以松散偶合。
  当某些对象之间的作用发生改变时，不会立即影响其他的一些对象之间的作用。
  保证这些作用可以彼此独立的变化。
  调停者模式将多对多的相互作用转化为一对多的相互作用。
  调停者模式将对象的行为和协作抽象化，把对象在小尺度的行为上与其他对象的相互作用分开处理。

2. 使用的原因
  当对象之间的交互操作很多,且每个对象的行为操作都依赖彼此时,
  为防止在修改一个对象的行为时,同时涉及到修改很多其他对象的行为,可采用调停者模式,来解决紧耦合问题.
  
  该模式将对象之间的多对多关系变成一对多关系,
  调停者对象将系统从网状结构变成以调停者为中心的星形结构,达到降低系统的复杂性,提高可扩展性的作用.

3. 适用的情况举例
    eg1. WTO组织：它是一个协调组织,它将各贸易区自行进行的相互协调的强耦合变成了松散合;
    eg2. 4个MM打麻将，相互之间谁应该给谁多少钱算不清楚了，某人担任调停者，各MM按照各自的筹码数算钱，赚了钱的从调停者这里拿，赔了钱的也付给调停者；
    eg3. 租赁中介：很多人有出租房子的需求，也有不少人需要租房，租赁中介在其中担任了调停者的角色，  疏通了两者之间的复杂关系，也方便了两者。


	
调停者模式包括以下几种角色 
1、抽象调停者角色
    定义出同事对象到调停者对象的接口，其中主要的方法是一个（或者多个）事件方法，
    在有些情况下，这个抽象对象可以省略。

2、具体调停者角色
    从抽象调停者继承而来，实现了抽象超类所声明的事件方法。
	具体调停者知晓所有的具体同事类，它从具体同事对象接受消息、向具体同事对象发出命令。

3、抽象同事类角色
    定义出调停者到同事对象的接口。
	同事对象只知道调停者而不知道其余的同事对象。

4、具体同事类角色
    所有的具体同时类均从抽象同事类继承而来。
	每一个具体同事类都很清楚它自己在小范围内的行为，而不知到它在大范围内的目的。




	调停者模式的优点和缺点： 

1、调停者模式的优点： 
（1）适当使用调停者模式可以较少使用静态的继承关系，使得具体同事类可以更加容易地被复用。 
（2）适当使用调停者模式可以避免同事之间的过渡耦合，使得调停类与同事类可以相对独立地演化。 
（3）调停者模式将多对多的相互转化为一对多的相互作用，使得对象之间的关系更加易于维护个理解。 
（4）调停者模式将对象的行为和协作抽象化，把对象在小尺度的行为上与其他对象的相互作用分开处理。 

2、调停者模式的缺点： 
（1）调停者模式降低了同事对象的复杂性，代价是增加了调停者类的复杂性。当然，在很多情况下，设置 
     一个调停者并不比不设置一个调停者更好 
（2）调停者类经常充满了各个具体同事类的关系协调代码，这种代码常常是不能复用的。因此，具体同事类的 
     复用是以调停者类的不可复用为代价的。 
     
     显然，调停者模式为同事对象，而不是调停者对象提供了可扩展性，所以这个模式所提供的可扩展性是一种 
     （向同事对象）倾斜的可扩展性。 


	 
在什么情况下使用调停者模式 
大多数对模式的研究集中于模式应当在什么情况下使用，却往往忽视这些模式不应当在什么情况下使用。 

1、不应当在责任划分混乱时使用 

2、不应当对“数据类”和“方法类”使用

