#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.1
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace A0530_LINQ_SQL.Sample
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="test")]
	public partial class Test : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void InsertTestMain(TestMain instance);
    partial void UpdateTestMain(TestMain instance);
    partial void DeleteTestMain(TestMain instance);
    partial void InsertTestSub(TestSub instance);
    partial void UpdateTestSub(TestSub instance);
    partial void DeleteTestSub(TestSub instance);
    #endregion
		
		public Test(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Test(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Test(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Test(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<TestMain> TestMain
		{
			get
			{
				return this.GetTable<TestMain>();
			}
		}
		
		public System.Data.Linq.Table<TestSub> TestSub
		{
			get
			{
				return this.GetTable<TestSub>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.test_main")]
	public partial class TestMain : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Value;
		
		private EntitySet<TestSub> _Test_sub;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public TestMain()
		{
			this._Test_sub = new EntitySet<TestSub>(new Action<TestSub>(this.attach_Test_sub), new Action<TestSub>(this.detach_Test_sub));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id", Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="value", Storage="_Value", DbType="VarChar(10)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestMain_TestSub", Storage="_Test_sub", ThisKey="Id", OtherKey="Main_id")]
		public EntitySet<TestSub> TestSub
		{
			get
			{
				return this._Test_sub;
			}
			set
			{
				this._Test_sub.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Test_sub(TestSub entity)
		{
			this.SendPropertyChanging();
			entity.TestMain = this;
		}
		
		private void detach_Test_sub(TestSub entity)
		{
			this.SendPropertyChanging();
			entity.TestMain = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.test_sub")]
	public partial class TestSub : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Main_id;
		
		private string _Value;
		
		private EntityRef<TestMain> _Test_main;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMain_idChanging(System.Nullable<int> value);
    partial void OnMain_idChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public TestSub()
		{
			this._Test_main = default(EntityRef<TestMain>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="id", Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="main_id", Storage="_Main_id", DbType="Int")]
		public System.Nullable<int> Main_id
		{
			get
			{
				return this._Main_id;
			}
			set
			{
				if ((this._Main_id != value))
				{
					this.OnMain_idChanging(value);
					this.SendPropertyChanging();
					this._Main_id = value;
					this.SendPropertyChanged("Main_id");
					this.OnMain_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="value", Storage="_Value", DbType="VarChar(10)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestMain_TestSub", Storage="_Test_main", ThisKey="Main_id", OtherKey="Id", IsForeignKey=true)]
		public TestMain TestMain
		{
			get
			{
				return this._Test_main.Entity;
			}
			set
			{
				TestMain previousValue = this._Test_main.Entity;
				if (((previousValue != value) 
							|| (this._Test_main.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Test_main.Entity = null;
						previousValue.TestSub.Remove(this);
					}
					this._Test_main.Entity = value;
					if ((value != null))
					{
						value.TestSub.Add(this);
						this._Main_id = value.Id;
					}
					else
					{
						this._Main_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("TestMain");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
