#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.18052
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace A0530_LINQ_SQL.Sample
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="TestLinq2Sql")]
	public partial class Test : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region 可扩展性方法定义
    partial void OnCreated();
    partial void Inserttest_Identity_tab(test_Identity_tab instance);
    partial void Updatetest_Identity_tab(test_Identity_tab instance);
    partial void Deletetest_Identity_tab(test_Identity_tab instance);
    partial void InsertTestSub(TestSub instance);
    partial void UpdateTestSub(TestSub instance);
    partial void DeleteTestSub(TestSub instance);
    partial void InsertTestMain(TestMain instance);
    partial void UpdateTestMain(TestMain instance);
    partial void DeleteTestMain(TestMain instance);
    partial void Inserttest_Identity_tab_Sub(test_Identity_tab_Sub instance);
    partial void Updatetest_Identity_tab_Sub(test_Identity_tab_Sub instance);
    partial void Deletetest_Identity_tab_Sub(test_Identity_tab_Sub instance);
    #endregion
		
		public Test() : 
				base(global::A0530_LINQ_SQL.Properties.Settings.Default.TestLinq2SqlConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public Test(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Test(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Test(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public Test(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<test_Identity_tab> test_Identity_tab
		{
			get
			{
				return this.GetTable<test_Identity_tab>();
			}
		}
		
		public System.Data.Linq.Table<TestSub> TestSub
		{
			get
			{
				return this.GetTable<TestSub>();
			}
		}
		
		public System.Data.Linq.Table<TestMain> TestMain
		{
			get
			{
				return this.GetTable<TestMain>();
			}
		}
		
		public System.Data.Linq.Table<test_Identity_tab_Sub> test_Identity_tab_Sub
		{
			get
			{
				return this.GetTable<test_Identity_tab_Sub>();
			}
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.HelloWorld2")]
		public int HelloWorld2([global::System.Data.Linq.Mapping.ParameterAttribute(Name="UserName", DbType="VarChar(10)")] string userName, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="OutVal", DbType="VarChar(10)")] ref string outVal, [global::System.Data.Linq.Mapping.ParameterAttribute(Name="InoutVal", DbType="VarChar(20)")] ref string inoutVal)
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())), userName, outVal, inoutVal);
			outVal = ((string)(result.GetParameterValue(1)));
			inoutVal = ((string)(result.GetParameterValue(2)));
			return ((int)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.testProc")]
		public ISingleResult<testProcResult> testProc()
		{
			IExecuteResult result = this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
			return ((ISingleResult<testProcResult>)(result.ReturnValue));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.getHelloWorld", IsComposable=true)]
		public IQueryable<getHelloWorldResult> getHelloWorld()
		{
			return this.CreateMethodCallQuery<getHelloWorldResult>(this, ((MethodInfo)(MethodInfo.GetCurrentMethod())));
		}
		
		[global::System.Data.Linq.Mapping.FunctionAttribute(Name="dbo.HelloWorldFunc", IsComposable=true)]
		public string HelloWorldFunc()
		{
			return ((string)(this.ExecuteMethodCall(this, ((MethodInfo)(MethodInfo.GetCurrentMethod()))).ReturnValue));
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.test_Identity_tab")]
	public partial class test_Identity_tab : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private string _value;
		
		private EntitySet<test_Identity_tab_Sub> _test_Identity_tab_Sub;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnvalueChanging(string value);
    partial void OnvalueChanged();
    #endregion
		
		public test_Identity_tab()
		{
			this._test_Identity_tab_Sub = new EntitySet<test_Identity_tab_Sub>(new Action<test_Identity_tab_Sub>(this.attach_test_Identity_tab_Sub), new Action<test_Identity_tab_Sub>(this.detach_test_Identity_tab_Sub));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_value", DbType="VarChar(10)")]
		public string value
		{
			get
			{
				return this._value;
			}
			set
			{
				if ((this._value != value))
				{
					this.OnvalueChanging(value);
					this.SendPropertyChanging();
					this._value = value;
					this.SendPropertyChanged("value");
					this.OnvalueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_Identity_tab_test_Identity_tab_Sub", Storage="_test_Identity_tab_Sub", ThisKey="id", OtherKey="Main_id")]
		public EntitySet<test_Identity_tab_Sub> test_Identity_tab_Sub
		{
			get
			{
				return this._test_Identity_tab_Sub;
			}
			set
			{
				this._test_Identity_tab_Sub.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_test_Identity_tab_Sub(test_Identity_tab_Sub entity)
		{
			this.SendPropertyChanging();
			entity.test_Identity_tab = this;
		}
		
		private void detach_test_Identity_tab_Sub(test_Identity_tab_Sub entity)
		{
			this.SendPropertyChanging();
			entity.test_Identity_tab = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestSub")]
	public partial class TestSub : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Main_id;
		
		private string _Value;
		
		private EntityRef<TestMain> _TestMain;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMain_idChanging(System.Nullable<int> value);
    partial void OnMain_idChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public TestSub()
		{
			this._TestMain = default(EntityRef<TestMain>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Main_id", DbType="Int")]
		public System.Nullable<int> Main_id
		{
			get
			{
				return this._Main_id;
			}
			set
			{
				if ((this._Main_id != value))
				{
					if (this._TestMain.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMain_idChanging(value);
					this.SendPropertyChanging();
					this._Main_id = value;
					this.SendPropertyChanged("Main_id");
					this.OnMain_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(10)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestMain_TestSub", Storage="_TestMain", ThisKey="Main_id", OtherKey="Id", IsForeignKey=true)]
		public TestMain TestMain
		{
			get
			{
				return this._TestMain.Entity;
			}
			set
			{
				TestMain previousValue = this._TestMain.Entity;
				if (((previousValue != value) 
							|| (this._TestMain.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TestMain.Entity = null;
						previousValue.TestSub.Remove(this);
					}
					this._TestMain.Entity = value;
					if ((value != null))
					{
						value.TestSub.Add(this);
						this._Main_id = value.Id;
					}
					else
					{
						this._Main_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("TestMain");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TestMain")]
	public partial class TestMain : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Value;
		
		private EntitySet<TestSub> _TestSub;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public TestMain()
		{
			this._TestSub = new EntitySet<TestSub>(new Action<TestSub>(this.attach_TestSub), new Action<TestSub>(this.detach_TestSub));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(10)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TestMain_TestSub", Storage="_TestSub", ThisKey="Id", OtherKey="Main_id")]
		public EntitySet<TestSub> TestSub
		{
			get
			{
				return this._TestSub;
			}
			set
			{
				this._TestSub.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_TestSub(TestSub entity)
		{
			this.SendPropertyChanging();
			entity.TestMain = this;
		}
		
		private void detach_TestSub(TestSub entity)
		{
			this.SendPropertyChanging();
			entity.TestMain = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.test_Identity_tab_Sub")]
	public partial class test_Identity_tab_Sub : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _Main_id;
		
		private string _Value;
		
		private EntityRef<test_Identity_tab> _test_Identity_tab;
		
    #region 可扩展性方法定义
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMain_idChanging(System.Nullable<int> value);
    partial void OnMain_idChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public test_Identity_tab_Sub()
		{
			this._test_Identity_tab = default(EntityRef<test_Identity_tab>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Main_id", DbType="Int")]
		public System.Nullable<int> Main_id
		{
			get
			{
				return this._Main_id;
			}
			set
			{
				if ((this._Main_id != value))
				{
					if (this._test_Identity_tab.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMain_idChanging(value);
					this.SendPropertyChanging();
					this._Main_id = value;
					this.SendPropertyChanged("Main_id");
					this.OnMain_idChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(10)")]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="test_Identity_tab_test_Identity_tab_Sub", Storage="_test_Identity_tab", ThisKey="Main_id", OtherKey="id", IsForeignKey=true)]
		public test_Identity_tab test_Identity_tab
		{
			get
			{
				return this._test_Identity_tab.Entity;
			}
			set
			{
				test_Identity_tab previousValue = this._test_Identity_tab.Entity;
				if (((previousValue != value) 
							|| (this._test_Identity_tab.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._test_Identity_tab.Entity = null;
						previousValue.test_Identity_tab_Sub.Remove(this);
					}
					this._test_Identity_tab.Entity = value;
					if ((value != null))
					{
						value.test_Identity_tab_Sub.Add(this);
						this._Main_id = value.id;
					}
					else
					{
						this._Main_id = default(Nullable<int>);
					}
					this.SendPropertyChanged("test_Identity_tab");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	public partial class testProcResult
	{
		
		private string _A;
		
		private string _B;
		
		public testProcResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_A", DbType="VarChar(7) NOT NULL", CanBeNull=false)]
		public string A
		{
			get
			{
				return this._A;
			}
			set
			{
				if ((this._A != value))
				{
					this._A = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_B", DbType="VarChar(7) NOT NULL", CanBeNull=false)]
		public string B
		{
			get
			{
				return this._B;
			}
			set
			{
				if ((this._B != value))
				{
					this._B = value;
				}
			}
		}
	}
	
	public partial class getHelloWorldResult
	{
		
		private string _A;
		
		private string _B;
		
		public getHelloWorldResult()
		{
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_A", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string A
		{
			get
			{
				return this._A;
			}
			set
			{
				if ((this._A != value))
				{
					this._A = value;
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_B", DbType="VarChar(5) NOT NULL", CanBeNull=false)]
		public string B
		{
			get
			{
				return this._B;
			}
			set
			{
				if ((this._B != value))
				{
					this._B = value;
				}
			}
		}
	}
}
#pragma warning restore 1591
