模板方法模式是类的的行为模式。
准备一个抽象类，将部分逻辑以具体方法以及具体构造器的形式实现，然后声明一些抽象方法来迫使子类实现剩余的逻辑。
不同的子类可以以不同的方式实现这些抽象方法，从而对剩余的逻辑有不同的实现。
 
 
模板方法模式涉及到两个角色：即抽象模板角色和具体模板角色，具体模板角色是对抽象模板角色的继承。 


1、抽象模板角色 
（1）定义了一个或多个抽象操作，以便子类实现。
这些抽象操作叫做原操作或者基本操作，他们是一个顶级逻辑的组成部分。
顶级逻辑，即顶级行为的的逻辑，顶级行为，即模板方法所代表的行为。

 
（2）定义并实现了一个模板方法。
这个模板方法一般是一个具体的方法，他给出了一个顶级逻辑的骨架，
而逻辑的组成步骤在相应的抽象操作中，推迟到子类实现，
顶级逻辑也有可能调用一些具体的方法，但肯定得有这个抽象模板的抽象方法，否则失去了模板方法模式的意义。



 
2、具体模板角色 
（1）实现父类所定义的一个或多个抽象方法，他们是顶级逻辑的组成部分。 

（2）每一个抽象模板角色都可以有任意多个具体模板角色与其对应，
而每一个具体模板角色都可以给出抽象模板（即它的抽象的父类）中的抽象方法的不同实现，从而使得顶级逻辑的实现各部相同。





模版方法中的方法可以分为两大类：模版方法（Template Method）和基本方法（Primitive Method)。
 
模版方法
一个模版方法是定义在抽象类中的，把基本操作方法组合在一起形成一个总算法或一个总行为的方法。
这个模版方法一般会在抽象类中定义，并由子类不加以修改地完全继承下来。


基本方法
基本方法又可以分为三种：抽象方法（Abstract Method）、具体方法（Concrete Method）和钩子方法（Hook Method）。        
1）抽象方法：一个抽象方法由抽象类声明，由具体子类实现。在C#语言里一个抽象方法以abstract关键字标示出来。
2）具体方法：一个具体方法由抽象类声明并实现，而子类并不实现或置换。在C#语言里面，一个具体方法没有abstract关键字。
3）钩子方法：一个钩子方法由抽象类声明并实现，而子类会加以扩展。通常抽象类给出的实现是一个空实现，作为方法的默认实现。







模板方法适用于以下情况： 

1) 一次性实现一个算法的不变的部分，并将可变的行为留给子类来实现。 

2) 各子类中公共的行为应被提取出来并集中到一个公共父类中以避免代码重复。其实这可以说是一种好的编码习惯了。 

3) 控制子类扩展。
    模板方法只在特定点调用操作，这样就只允许在这些点进行扩展。





使用模板方法模式可以将代码的公共行为提取出来，达到复用的目的。
而且，在模板方法模式中，是由父类的模板方法来控制子类中的具体实现。
这样你在实现子类的时候，根本不需要对业务流程有太多的了解。	
