本项目是“原型”模式的 例子代码


原型 由三部分组成。


Prototype（抽象原型类）
它是声明克隆方法的接口，是所有具体原型类的公共父类，可以是抽象类也可以是接口，甚至还可以是具体实现类。
本例子中使用的是 C# 中的 ICloneable


 
ConcretePrototype（具体原型类）
它实现在抽象原型类中声明的克隆方法，在克隆方法中返回自己的一个克隆对象。
本例子中使用的是 
P0107_Prototype.Prototype.Message
P0107_Prototype.Prototype.MessageLog

 
Client（客户类）
让一个原型对象克隆自身从而创建一个新的对象，在客户类中只需要直接实例化或通过工厂方法等方式创建一个原型对象，再通过调用该对象的克隆方法即可得到多个相同的对象。
由于客户类针对抽象原型类Prototype编程，因此用户可以根据需要选择具体原型类，系统具有较好的可扩展性，增加或更换具体原型类都很方便。



======================================================


原型模式总结
    原型模式作为一种快速创建大量相同或相似对象的方式，在软件开发中应用较为广泛，
	很多软件提供的复制(Ctrl + C)和粘贴(Ctrl + V)操作就是原型模式的典型应用，
	下面对该模式的使用效果和适用情况进行简单的总结。
 
1.主要优点
 
原型模式的主要优点如下：
(1) 当创建新的对象实例较为复杂时，
使用原型模式可以简化对象的创建过程，通过复制一个已有实例可以提高新实例的创建效率。

(2) 扩展性较好，
由于在原型模式中提供了抽象原型类，在客户端可以针对抽象原型类进行编程，
而将具体原型类写在配置文件中，增加或减少产品类对原有系统都没有任何影响。
 
(3) 原型模式提供了简化的创建结构，
工厂方法模式常常需要有一个与产品类等级结构相同的工厂等级结构，
而原型模式就不需要这样，原型模式中产品的复制是通过封装在原型类中的克隆方法实现的，无须专门的工厂类来创建产品。
 
(4) 可以使用深克隆的方式保存对象的状态，
使用原型模式将对象复制一份并将其状态保存起来，以便在需要的时候使用（如恢复到某一历史状态），可辅助实现撤销操作。
 


2.主要缺点
 
原型模式的主要缺点如下：
(1) 需要为每一个类配备一个克隆方法，
而且该克隆方法位于一个类的内部，当对已有的类进行改造时，需要修改源代码，违背了“开闭原则”。
 

(2) 在实现深克隆时需要编写较为复杂的代码，
而且当对象之间存在多重的嵌套引用时，为了实现深克隆，每一层对象对应的类都必须支持深克隆，实现起来可能会比较麻烦。
 


3.适用场景
 
在以下情况下可以考虑使用原型模式：
 
(1) 创建新对象成本较大（如初始化需要占用较长的时间，占用太多的CPU资源或网络资源），
新的对象可以通过原型模式对已有对象进行复制来获得，如果是相似对象，则可以对其成员变量稍作修改。

 
(2) 如果系统要保存对象的状态，而对象的状态变化很小，
或者对象本身占用内存较少时，可以使用原型模式配合备忘录模式来实现。

 
(3) 需要避免使用分层次的工厂类来创建分层次的对象，并且类的实例对象只有一个或很少的几个组合状态，
通过复制原型对象得到新实例可能比使用构造函数创建一个新实例更加方便。

